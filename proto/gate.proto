syntax="proto3";
package gate;
option go_package = "github.com/andyzhou/tinygate";
option java_package = "com.tc.gate";

//define node status
enum NodeStatus {
    NODE_DOWN = 0;
    NODE_UP = 1;
    NODE_MAINTAIN = 2;
    NODE_ACTIVE = 3;
}

//auth info
message AccessAuth {
    string app = 1;
    string token = 2;
}

//byte message data
message ByteMessage {
    string service = 1; //service kind
    uint32 messageId = 2; //message id
    bytes data = 3; //byte data
    string address = 4; //assigned address, option field
    repeated uint32 connIds = 5 [packed=true]; //tcp,ws connect ids, option field
}

//general request
message GateReq {
    string service = 1; //service kind
    uint32 messageId = 2; //message id
    bytes data = 3; //byte data
    string address = 4; //assigned address, option field
    bool isAsync = 5; //async mode switcher, option field
    AccessAuth auth = 6; //access auth, option field
}

//general response
message GateResp {
    string service = 1; //service kind
    uint32 messageId = 2; //message id
    bytes data = 3; //byte data
    int32  errorCode = 4;
    string errorMessage = 5;
}

//define service
service GateService {
    //stream mode
    //cast or receive data between gate and target service
    rpc BindStream(stream ByteMessage) returns(stream ByteMessage);

    //general mode
    rpc GenReq(GateReq) returns(GateResp);
}
